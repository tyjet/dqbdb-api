# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
# To check docker images:
#   https://circleci.com/docs/2.0/circleci-images/
#   https://hub.docker.com/r/circleci/ruby/tags/ - more up to date

version: 2
jobs:
  build:
    docker:
      - image: docker:stable-git
    environment:
      - COMPOSE_FILE: 'docker-compose.test.yml'
      - DOCKER_REPOSITORY: 'dynaer/dqbdb-api'
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Docker build
          command: docker build . -t dynaer/dqbdb-api:$(echo $CIRCLE_BRANCH | sed "s|/|-|")
      - run:
          name: Docker push
          command: docker push dynaer/dqbdb-api:$(echo $CIRCLE_BRANCH | sed "s|/|-|")
  test:
    machine:
      image: circleci/classic:201711-01
    environment:
      - COMPOSE_FILE: 'docker-compose.test.yml'
      - DOCKER_REPOSITORY: 'dynaer/dqbdb-api'
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            [ -z "$DEBUG" ] || set -x
            set -x
            docker network create local_dev 2>/dev/null || true
            docker volume rm dqbdb-api-gems 2>/dev/null || true
            docker volume create --name=dqbdb-api-gems 2>/dev/null
            export CONTAINER_NAME=dynaer/dqbdb-api:$(echo $CIRCLE_BRANCH | sed "s|/|-|")
            docker-compose pull --ignore-pull-failures
            docker-cmpose run test bundle install
            docker-compose up -d --no-recreate test-pg 2> /dev/null
            docker-compose run test rails db:setup
      - run:
          name: Test
          command: |
            [ -z "$DEBUG" ] || set -x
            export CONTAINER_NAME=$dynaer/dqbdb-api:$(echo $CIRCLE_BRANCH | sed "s|/|-|")
            docker-compose up -d spring
            docker-compose run test rspec

  brakeman:
    machine:
      image: circleci/classic:201711-01
    environment:
      - COMPOSE_FILE: 'docker-compose.test.yml'
      - DOCKER_REPOSITORY: 'dynaer/dqbdb-api'
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker volume create --name=dqbdb-api-gems
            docker volume create --name=dqbdb-api-spring
            docker-compose pull test-pg test
            docker-compose run test bundle install --with test
            docker-compose up -d spring
      - run:
          name: Brakeman
          command: docker-compose run brakeman
      - store_artifacts:
          path: brakeman-output.html

  rubocop:
    machine:
      image: circleci/classic:201711-01
    environment:
      - COMPOSE_FILE: 'docker-compose.test.yml'
      - DOCKER_REPOSITORY: 'dynaer/dqbdb-api'
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker volume create --name=dqbdb-api-gems
            docker volume create --name=dqbdb-api-spring
            docker-compose pull test-pg test
            docker-compose run test bundle install --with test
            docker-compose up -d spring
      - run:
          name: Rubocop
          command: docker-compose run rubocop
      - store_artifacts:
          path: rubocop.html

workflows:
  version: 2
  build-test-and-lint:
    jobs:
      - build:
          context: org-global
      - test:
          context: org-global
          requires:
            - build
      - brakeman:
          context: org-global
          requires:
            - build
      - rubocop:
          context: org-global
          requires:
            - build
